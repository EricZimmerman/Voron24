

[gcode_macro PARK_NOZZLE]
description = Park the nozzle
gcode:
	SAVE_GCODE_STATE NAME=PARKNOZZLE
	#CONDITIONAL_HOME
	G90
	G0 X15 Y15 F30000
	RESTORE_GCODE_STATE NAME=PARKNOZZLE

# [gcode_macro CENTER_NOZZLE]
# description = Center the nozzle
# gcode: 
# 	SAVE_GCODE_STATE NAME=CENTERNOZZLE
# 	CONDITIONAL_HOME
# 	G90
# 	G0 X175 Y175 F30000
# 	RESTORE_GCODE_STATE NAME=CENTERNOZZLE


# [gcode_macro CONDITIONAL_HOME]
# gcode:
# 	{% if "xyz" not in printer.toolhead.homed_axes %}
# 	G28
# 	{% endif %}

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  BED_MESH_CLEAR
  SET_GCODE_OFFSET Z=0
  
  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
 # STATUS_HOMING         # Sets SB-leds to homing-mode
  
  G28 METHOD=PROXIMITY # Home using proximity to get close to avoid the slow creep down when z is high
  
  G28z METHOD=CONTACT CALIBRATE=0                  # Full home (XYZ)
  G90                   # Absolute position
  
  G0 Z2   ; position beacon at 2mm for heat soak

  RESPOND MSG="Heating bed to temp for soak: 125c"           # Displays info
  M190 S125 #bed to 125
  M106 S255 # Turns on the PT-fan
  RESPOND MSG="Waiting for chamber to reach (on Gantry Temp): {target_chamber}c"           # Displays info
  TEMPERATURE_WAIT SENSOR="temperature_sensor Gantry_Temp" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  RESPOND MSG="Bed target temp: {target_bed}c"           # Displays info
  M190 S{target_bed}   
  
#   # # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
#   {% if params.BED|int > 90 %}
#     RESPOND MSG="Bed target temp: {target_bed}c"           # Displays info
#   #   STATUS_HEATING                                      # Sets SB-leds to heating-mode
#     M106 S255                                           # Turns on the PT-fan
 
# #    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
#     M190 S{target_bed}                                  # Sets the target temp for the bed
#     #RESPOND MSG="Heatsoak: {target_chamber}c"  # Displays info
#     #RESPOND MSG="Soak for 5min"                # Displays info
#     #G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
    
  

#   # # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
#   {% else %}
#     RESPOND MSG="Bed target: {target_bed}c"           # Displays info
#     STATUS_HEATING                                      # Sets SB-leds to heating-mode
#  #   G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
#     M190 S{target_bed}                                  # Sets the target temp for the bed
#     RESPOND MSG="Soak for 15 min"                # Displays info
#     G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
#     RESPOND MSG="10 minutes left"                # Displays info
#     G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
#     RESPOND MSG="5 minutes left"                # Displays info
#     G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
#   {% endif %}
  

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  RESPOND MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c


  RESPOND MSG="QGL"     # Displays info
  #STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  G28 Z METHOD=CONTACT CALIBRATE=1    ; calibrate z offset and beacon model hot
  QUAD_GANTRY_SCAN                       ; or QGL to balance towers

  RESPOND MSG="Bed mesh"    # Displays info
  BED_MESH_CALIBRATE ADAPTIVE=1 RUNS=2           ; bed mesh in scan mode

  G28 Z METHOD=CONTACT CALIBRATE=0    ; calibrate z offset only after tilt/mesh

  M107                                                          # Turns off partcooling fan
  RESPOND MSG="Hotend target: {target_extruder}c"             # Displays info
  M104 S{target_extruder}                    ; set extruder to print temp
  M109 S{target_extruder}                    ; wait for extruder temp

  #G28 Z METHOD=CONTACT CALIBRATE=0    ; calibrate z offset only with hot nozzle

  SET_GCODE_OFFSET Z=0.015     ; add a little offset for hotend thermal expansion. needs fine tuning, long meltzones require more
  
  # Gets ready to print by doing a purge line and updating the SB-leds
  RESPOND MSG="Printer goes brr"          # Displays info
 # STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  #G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  #G0 Z0.4                                          # Raises Z to 0.4
  #G91                                              # Incremental positioning 
  #G1 X100 E20 F1000                                # Purge line
  #G90                                              # Absolut position
  PRIMELINE

[gcode_macro PRINT_END]
gcode: 
	RESPOND MSG="Done"
	
	#COOLDOWN
	BED_MESH_CLEAR
	
	M400
	G91
	
	G1 E-0.3 F3600
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.z < (max_z - 50) %}
	{% set z_safe = 50.0 %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}

    {% set z_safe =  10 %} #printer.toolhead.position.z +
	
	G0 X{x_safe} Y{y_safe} Z{z_safe} F30000
	
	SET_GCODE_OFFSET Z=0
	TURN_OFF_HEATERS
	PARK_NOZZLE
	
	G1 E-10.0 F4800
	
	#WIPE_NOZZLE CYCLES=1
	
	M106 S128
	G4 P30000
	
	#WIPE_NOZZLE
	
	G92 E0
	M107

# [gcode_macro PRINT_END]
# gcode:
#     # safe anti-stringing move coords
#     {% set th = printer.toolhead %}
#     {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
#     {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
#     {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
#     M400                           ; wait for buffer to clear

#     G91                         ; relative positioning
#     G1 E-10 F4800              ; retract
#     G1 Z+10 X-2 Y-2 F6000
#     G1 E-2 F500        ; short quick move to disengage from print
#     G90                         ; absolute positioning

#     # move up max allowable distance: Z80, else 10mm up, else max
#     {% if printer.toolhead.position.z < 80 %}
#         G1 Z80
#     {% elif printer.toolhead.position.z + 10 < printer.configfile.config["stepper_z"]["position_max"] %}
#         G91
#         G1 Z+20
#         G90
#     {% else %}
#         G1 Z{printer.stepper_z.position_max}
#     {% endif %}

#     G1 X15 Y15 F3000           ; move printhead out of the way
    
#     #M221 S100                   ; reset flow
#     M104 S0                     ; turn off hotend
#     M140 S0                     ; turn off heatbed
#     M107                        ; turn off fan
            
#     BED_MESH_CLEAR

#####################################################################
#   print_start macro
#####################################################################


# [gcode_macro PRINT_START]
# gcode:
# 	{% set bed = params.BED|int %}
# 	{% set hotend = params.EXTRUDER|int %}
# 	{% set chamber = params.CHAMBER|default(0)|int %}
	
# 	SET_VELOCITY_LIMIT VELOCITY=400 ACCEL=15000
# 	M204 S15000
		
# 	#HEATSOAK BED={bed} HOTEND=160 CHAMBER={chamber} WAIT=1
	
# 	M117 Calibrating
# 	BED_MESH_CLEAR
# 	G28
# 	QUAD_GANTRY_LEVEL
# 	G28 Z
# 	BED_MESH_CALIBRATE ADAPTIVE=1
# 	SET_GCODE_OFFSET Z={(hotend-160)/2400}
	
# 	M106 S0 #fans
#    # M104 S{target_extruder}                    ; set extruder to print temp
#   #  M109 S{target_extruder}                    ; wait for extruder temp
    
# 	#WIPE_NOZZLE
	
# 	M117 Purging
# 	PURGE_LINE HOTEND={hotend}
	
# 	M117 Printing

# [gcode_macro PRINT_END]
# gcode:
# 	M117 Done
	
# 	#COOLDOWN
# 	BED_MESH_CLEAR
	
# 	M400
# 	G91
	
# 	G1 E-0.3 F3600
	
	
# 	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
# 	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
# 	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
# 	{% if printer.toolhead.position.x < (max_x - 20) %}
# 	{% set x_safe = 20.0 %}
# 	{% else %}
# 	{% set x_safe = -20.0 %}
# 	{% endif %}
	
# 	{% if printer.toolhead.position.y < (max_y - 20) %}
# 	{% set y_safe = 20.0 %}
# 	{% else %}
# 	{% set y_safe = -20.0 %}
# 	{% endif %}
	
# 	{% if printer.toolhead.position.z < (max_z - 50) %}
# 	{% set z_safe = 50.0 %}
# 	{% else %}
# 	{% set z_safe = max_z - printer.toolhead.position.z %}
# 	{% endif %}
	
# 	G0 X{x_safe} Y{y_safe} Z{z_safe} F30000
	
# 	SET_GCODE_OFFSET Z=0
# 	TURN_OFF_HEATERS
# 	PARK_NOZZLE
	
# 	G1 E-10.0 F4800
	
# 	#WIPE_NOZZLE CYCLES=1
	
# 	M106 S128
# 	G4 P30000
	
# 	#WIPE_NOZZLE
	
# 	G92 E0
# 	M107


# [gcode_macro CANCEL_PRINT]
# description: Cancel the actual running print
# rename_existing: CANCEL_PRINT_BASE
# gcode: 
# 	TURN_OFF_HEATERS
# 	CANCEL_PRINT_BASE
# 	PRINT_END



# [gcode_macro PURGE_LINE]
# gcode: 
# 	{% set hotend = params.HOTEND|int %}
	
# 	G90
	
# 	G1 X5 Y5 Z0.4 F8000
# 	M104 S{hotend}
# 	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={hotend}
	
# 	G91
# 	G1 E13 F200
# 	G1 Y20 E3 F1200
	
# 	G1 Y120 E27 F1200
# 	G1 X0.8
# 	G1 Y-10 E2 F1200
# 	G1 X0.8
	
# 	G92 E0
# 	G90
    
[gcode_macro Prime_Line2]
gcode:
    G1 Z2 F6000
    G1 X-3  Y0  F12000
    G1 Z0.3
    G1 X55 E10 F1000
    G1 X90 E5 F1000
    G1 X120 E2 F1000
    G92 E0.0             ;set extruder to Zero



    
[gcode_macro PRIMELINE]
gcode:
    # Base macro parameters
    {% set prime_line_length = params.LINE_LENGTH|default(45)|float %}
    {% set prime_line_purge_distance = params.PURGE_LENGTH|default(30)|float %}
    {% set prime_line_flowrate = params.FLOWRATE|default(10)|float %}
    {% set prime_line_height = params.LINE_HEIGHT|default(0.6)|float %}
    {% set prime_line_adaptive = params.ADAPTIVE_MODE|default(0)|int %}
    {% set prime_line_margin = params.LINE_MARGIN|default(5.0)|float %} # Used only in adaptive mode
    
    # If the SIZE parameter is defined and not a dummy placeholder, we use it to do the adaptive bed mesh logic
    {% set coordinatesFound = false %}
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
        {% set coordinatesFound = true %}
    {% elif printer.exclude_object is defined %}
        {% if printer.exclude_object.objects %}
            # Else if SIZE is not defined, we fallback to use the [exclude_object] tags
            # This method is derived from Kyleisah KAMP repository: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging)
            {% set eo_points = printer.exclude_object.objects|map(attribute='polygon')|sum(start=[]) %}
            {% set xMinSpec = eo_points|map(attribute=0)|min %}
            {% set yMinSpec = eo_points|map(attribute=1)|min %}
            {% set xMaxSpec = eo_points|map(attribute=0)|max %}
            {% set yMaxSpec = eo_points|map(attribute=1)|max %}
            {% set coordinatesFound = true %}
        {% endif %}
    {% endif %}

    # We get the default prime line position parameters
    {% set prime_line_x, prime_line_y = 5, 2.5|map('float') %}
    {% set prime_line_x = params.START_X|default(prime_line_x)|float %}
    {% set prime_line_y = params.START_Y|default(prime_line_y)|float %}
    {% set prime_line_direction = params.LINE_DIRECTION|default("X")|string|upper %}

    {% set center_x, center_y = [printer.toolhead.axis_maximum.x / 2, printer.toolhead.axis_maximum.y / 2]|map("float") %}
    
    # If first layer coordinates are retrieved and adaptive mode is enabled, then we replace the coordinates to
    # do an adaptive purge while being careful to have the line stay on the bed when the first layer
    # is in an opposite bed quadrant than the prime line initial coordinates (due to mirrored coordinates from center axes)...
    {% if coordinatesFound and prime_line_adaptive == 1 %}
        {% set prime_line_x = 2*center_x - prime_line_x if (prime_line_x > center_x and xMaxSpec < center_x) or (prime_line_x < center_x and xMinSpec > center_x) 
                               else prime_line_x %}
        {% set prime_line_y = 2*center_y - prime_line_y if (prime_line_y > center_y and yMaxSpec < center_y) or (prime_line_y < center_y and yMinSpec > center_y) 
                               else prime_line_y %}
        {% set prime_line_x = [[prime_line_x, xMinSpec - prime_line_margin]|max, xMaxSpec + prime_line_margin]|min %}
        {% set prime_line_y = [[prime_line_y, yMinSpec - prime_line_margin]|max, yMaxSpec + prime_line_margin]|min %}
    {% endif %}

    # Choose the way of printing the primeline (in + or -) alongside the direction to avoid going outside the bed boundaries
    {% set prime_line_way = -1 if (prime_line_direction == "X" and prime_line_x > center_x) or (prime_line_direction == "Y" and prime_line_y > center_y) else 1 %}

    {% set St = 350 * 60 %}
    {% set Sz = 15 * 60 %}
    {% set verbose = True %}

    {% set klippain_mmu_enabled = False %}
    {% set filament_sensor_enabled = False %}
    {% set re_enable_filament_sensor = 0 %}

    {% set max_extrude_cross_section = printer["configfile"].config["extruder"]["max_extrude_cross_section"]|float %}
    {% set filament_diameter = printer["configfile"].config["extruder"]["filament_diameter"]|float %}
    
    # We first compute the width of the prime line
    {% set purge_volume = prime_line_purge_distance * 3.14159 * (filament_diameter / 2)**2 %}
    {% set line_width = purge_volume / (prime_line_height * prime_line_length) %}

    # Then we check that the prime line cross section will not be problematic (exceeding Klipper max_extrude_cross_section)
    # or, if it's the case, we warn the user and add a correction to the length of filament to be purged
    {% if (prime_line_height * line_width) > max_extrude_cross_section %}
        {% if verbose %}
            {action_respond_info("The prime_line_purge_distance of %.4f mm is too high and will exceed the max_extrude_cross_section!" % prime_line_purge_distance)}
        {% endif %}
        {% set prime_line_purge_distance = 0.98 * (max_extrude_cross_section * prime_line_length) / (3.14159 * (filament_diameter / 2)**2) %}
        {% set purge_volume = prime_line_purge_distance * 3.14159 * (filament_diameter / 2)**2 %}
        {% set line_width = purge_volume / (prime_line_height * prime_line_length) %}
        {% if verbose %}
            {action_respond_info("Klippain corrected the prime_line_purge_distance to %.4f mm" % prime_line_purge_distance)}
        {% endif %}
    {% endif %}

    # We then compute the height to width ratio and validate that the prime line will not be too thin
    {% if (prime_line_height / line_width) >= 0.5 %} # TODO: validate this 1/2 ratio is good for all
        {action_raise_error("The prime line will be too thin and will probably not stick properly to the bed. Increase its purge distance or decrease its length!")}
    {% endif %}

    # Finally we compute the speed to get the correct flowrate for the prime line
    {% set speed = (prime_line_flowrate / (prime_line_height * line_width)) * 60 |float %}

    {% if klippain_mmu_enabled %}
        _KLIPPAIN_MMU_SET_CLOGDETECTION STATE=0
    {% endif %}

    {% if filament_sensor_enabled %}
        {% if (printer['filament_motion_sensor runout_sensor'] is defined and printer['filament_motion_sensor runout_sensor'].enabled) or (printer['filament_switch_sensor runout_sensor'] is defined and printer['filament_switch_sensor runout_sensor'].enabled) %}
            SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
            {% set re_enable_filament_sensor = 1 %}
        {% endif %}
    {% endif %}

    G91
    M83
    {% if (printer.toolhead.position.z < 5) %}
        G1 Z5 F{Sz}
    {% endif %}

    # Starting position
    G90
    G0 X{prime_line_x} Y{prime_line_y} F{St}
    G1 Z{prime_line_height} F{Sz|int / 2}

    # Add pressure in the nozzle
    G92 E0
    G1 E18 F300

    # Prime line
    G92 E0
    {% if prime_line_direction == "X" %}
        G1 X{prime_line_x + prime_line_way*prime_line_length} E{prime_line_purge_distance} F{speed}
    {% elif prime_line_direction == "Y" %}
        G1 Y{prime_line_y + prime_line_way*prime_line_length} E{prime_line_purge_distance} F{speed}
    {% else %}
        { action_respond_error("Prime line direction is not valid. Choose either X or Y in the variables.cfg file!") }
    {% endif %}

    # Retract and Z-hop
    G92 E0
    G1 E-0.2 F2100
    G92 E0
    G1 Z3 F{Sz}

    # Additional small movement to get out of the line as some slicers directly emmit
    # a Z- move as a first step that make the toolhead crash back in the line and get dirty
    G91
    G1 X2 Y2 F{St}
    G90
    
    # Flushing Klipper's buffer to ensure the primeline sequence is done before continuing
    M400




  
