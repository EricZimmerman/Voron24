
#created by mjonuschat
#https://gist.github.com/mjonuschat/29549e72418b13f0d9bc8d79350b7ed0

#add the following to you slicer start g-code
#M104 S0
#M140 S0
#M117
#PRINT_START BED=[first_layer_bed_temperature] EXTRUDER=[first_layer_temperature[initial_tool]]  SIZE={first_layer_print_min[0]}_{first_layer_print_min[1]}_{first_layer_print_max[0]}_{first_layer_print_max[1]} MATERIAL="[filament_type]" FILAMENT="[filament_settings_id]" NOZZLE={nozzle_diameter[0]}

#add the following to your print_start macro in klipper
#   _ADJUST_PRESSURE_ADVANCE FILAMENT="{filament}" NOZZLE={nozzle} MATERIAL="{material}"
######################### PRESSURE ADVANCE #########################
# If your slicers filament gcode sets pressure advance, it will take precendence over this, as it runs after.

[gcode_macro _ADJUST_PRESSURE_ADVANCE]
description: Configure pressure advance based on filament/material/bed temperature
gcode:
  {% set filaments = printer.save_variables.variables.setdefault('filaments', {}) %}
  {% set materials = printer.save_variables.variables.setdefault('materials', {}) %}

  {% set name = params.FILAMENT|default("")|string %}
  {% set nozzle_diameter = params.NOZZLE|default(0.4)|float %}
  {% set material = params.MATERIAL|default("")|string %}

  {% set settings = {'name': 'default', 'default': True, 'nozzle_diameter': printer.configfile.settings.extruder.nozzle_diameter, 'pressure_advance': printer.configfile.settings.extruder.pressure_advance, 'smooth_time': printer.configfile.settings.extruder.pressure_advance_smooth_time} %}

  # Try to find a known filament and nozzle config
  {% if settings.default and name in filaments %}
    {% set filament = filaments[name] %}
    {% for config in filament.configs %}
      {% if config.nozzle_diameter == nozzle_diameter %}
        {% set _ = settings.update(name=filament.name, default=False) %}
        {% set _ = settings.update(config) %}
      {% endif %}
    {% endfor %}
  {% endif %}

  # Try to find based on passed in material type
  {% if settings.default and material in materials %}
    {% set _ = settings.update(name="%s (material)" % material, default=False, pressure_advance=materials[material]) %}
  {% endif %}

  # Guess based on bed temperature
  {% if settings.default %}
    {% if printer.heater_bed.target >= 100 %}
      {% set _ = settings.update(name="ABS (autodetect)", default=False, pressure_advance=0.055) %}
    {% elif printer.heater_bed.target <= 65 %}
      {% set _ = settings.update(name="PLA (autodetect)", default=False, pressure_advance=0.035) %}
    {% endif %}
  {% endif %}

  {% set messages = ["Pressure Advance:", "┣━ Profile: %s" % settings.name, "┣━ Nozzle: %1.02f" % settings.nozzle_diameter, "┣━ Pressure Advance: %1.06f" % settings.pressure_advance, "┗━ Smooth Time: %1.06f" % settings.smooth_time] %}
  { action_respond_info(messages|join("\n")) }
  SET_PRESSURE_ADVANCE ADVANCE={settings.pressure_advance} SMOOTH_TIME={settings.smooth_time}

[gcode_macro _INIT_DEFAULT_MATERIALS]
description: Register default PA settings for common filament materials
gcode:
  {% set materials = printer.save_variables.variables.setdefault('materials', {}) %}
  {% if 'PLA' not in materials %}
    {% set _ = materials.update({'PLA': 0.035}) %}
  {% endif %}
  {% if 'PET' not in materials %}
    {% set _ = materials.update({'PET': 0.045}) %}
  {% endif %}
  {% if 'ABS' not in materials %}
    {% set _ = materials.update({'ABS': 0.055}) %}
  {% endif %}
  {% if 'ASA' not in materials %}
    {% set _ = materials.update({'ASA': 0.055}) %}
  {% endif %}
  SAVE_VARIABLE VARIABLE=materials VALUE="{materials}"

[gcode_macro MATERIAL_LIST]
description: Show a list of known filament materials with pressure advance settings
gcode:
  {% if not printer.save_variables.variables.materials %}
    { action_respond_info("No filament materials have been registered, use MATERIAL_ADD to add some.") }
  {% else %}
    {% set materials = printer.save_variables.variables.setdefault('materials', {}) %}
    {% set messages = ["Registered filament materials:"] %}
    {% for name, pa in materials|dictsort() %}
      {% set prefix = "┗━" if loop.last else "┣━" %}
      {% set _ = messages.append("%s %s • Pressure Advance: %1.06f" % (prefix, name, pa)) %}
    {% endfor %}
    { action_respond_info(messages|join("\n")) }
  {% endif %}

[gcode_macro MATERIAL_ADD]
description: Register (or change) a filament material in the database
gcode:
  {% set name = params.NAME|default("")|string %}
  {% set pa = params.PRESSURE_ADVANCE|default(printer['extruder'].pressure_advance)|float %}

  {% if not name %}
    { action_respond_info("MATERIAL_ADD: NAME is a required parameter, aborting") }
  {% else %}
    {% set materials = printer.save_variables.variables.setdefault('materials', {}) %}
    {% if name in materials %}
      # Update material entry
      { action_respond_info("Updated filament material %s: Pressure Advance: %1.06f => %1.06f" % (name, materials[name], pa)) }
      {% set _ = materials.update({name: pa}) %}
    {% else %}
      # Register new material
      {% set _ = materials.update({name: pa}) %}
      { action_respond_info("Registered filament material %s: Pressure Advance:%1.06f" % (name, pa)) }
    {% endif %}
    SAVE_VARIABLE VARIABLE=materials VALUE="{materials}"
  {% endif %}

[gcode_macro MATERIAL_REMOVE]
description: Remove a filament material from the database
gcode:
  {% set name = params.NAME|default("")|string %}

  {% if not name %}
    { action_respond_info("MATERIAL_REMOVE: NAME is a required parameter, aborting") }
  {% else %}
    {% set materials = printer.save_variables.variables.setdefault('materials', {}) %}
    {% if name in materials %}
      {% set _ = materials.pop(name, None) %}
      { action_respond_info("Removed filament material %s from the database" % (name)) }
    {% else %}
      { action_respond_info("Filament material %s not found, nothing to remove") }
    {% endif %}
    SAVE_VARIABLE VARIABLE=materials VALUE="{materials}"
  {% endif %}

[gcode_macro FILAMENT_LIST]
description: Show a list of known filaments and pressure advance settings
gcode:
  {% if not printer.save_variables.variables.filaments %}
    { action_respond_info("No filaments have been registered, use FILAMENT_ADD to add some.") }
  {% else %}
    {% set filaments = printer.save_variables.variables.filaments %}
    {% set messages = ["Registered filaments:"] %}
    {% for key, filament in filaments|dictsort() %}
      {% set _ = messages.append(filament.name) %}
      {% for config in filament.configs|sort(attribute="nozzle_diameter") %}
        {% set prefix = "┗━" if loop.last else "┣━" %}
        {% set _ = messages.append("%s Nozzle: %1.02fmm • Pressure Advance: %1.06f • Smooth Time: %1.06f" % (prefix, config.nozzle_diameter, config.pressure_advance, config.smooth_time)) %}
      {% endfor %}
    {% endfor %}
    { action_respond_info(messages|join("\n")) }
  {% endif %}

[gcode_macro FILAMENT_ADD]
description: Register (or change) a filament/nozzle config in the database
gcode:
  {% set extruder_config = printer.configfile.settings.extruder %}
  {% set name = params.NAME|default("")|string %}
  {% set nozzle_diameter = params.NOZZLE|default(0.4)|float %}
  {% set pa = params.PRESSURE_ADVANCE|default(printer['extruder'].pressure_advance)|float %}
  {% set st = params.SMOOTH_TIME|default(printer['extruder'].smooth_time)|float %}

  {% if not name %}
    { action_respond_info("FILAMENT_ADD: NAME is a required parameter, aborting") }
  {% else %}
    {% set filaments = printer.save_variables.variables.setdefault('filaments', {}) %}
    {% if name in filaments %}
      {% set filament = filaments[name] %}
      {% for config in filament.configs %}
        # Update a filament database entry
        {% if config.nozzle_diameter == nozzle_diameter %}
          {% set messages = [] %}
          {% if pa != config['pressure_advance']  %}
            {% set _ = messages.append("Pressure Advance: %1.06f => %1.06f" % (config['pressure_advance'], pa)) %}
            {% set _ = config.update(pressure_advance=pa) %}
          {% endif %}

          {% if st != config['smooth_time'] %}
            {% set _ = messages.append("Smooth Time: %1.06f => %1.06f" % (config['smooth_time'], st)) %}
            {% set _ = config.update(smooth_time=st) %}
          {% endif %}

          {% if messages %}
            { action_respond_info("Updated filament %s (Nozzle: %1.02fmm): %s" % (name, nozzle_diameter, ' • '.join(messages))) }
          {% else %}
            { action_respond_info("No changes found for filament %s (Nozzle: %1.02fmm)" % (name, nozzle_diameter)) }
          {% endif %}
        # Register a new nozzle diameter for the filament
        {% elif loop.last %}
          {% set _ = filaments[name].configs.append({'nozzle_diameter': nozzle_diameter, 'pressure_advance': pa, 'smooth_time': st}) %}
          { action_respond_info("Added %1.02fmm nozzle config to filament %s: Pressure Advance %1.06f • Smooth Time: %1.06f" % (nozzle_diameter, name, pa, st)) }
        {% endif %}
      {% endfor %}
    # Register a whole new filament
    {% else %}
      {% set _ = filaments.update({name: {'name': name, 'configs': [{'nozzle_diameter': nozzle_diameter, 'pressure_advance': pa, 'smooth_time': st}]}}) %}
      { action_respond_info("Registered new filament %s: Nozzle: %1.02fmm • Pressure Advance %1.06f • Smooth Time: %1.06f" % (name, nozzle_diameter, pa, st)) }
    {% endif %}
    SAVE_VARIABLE VARIABLE=filaments VALUE="{filaments}"
  {% endif %}

[gcode_macro FILAMENT_REMOVE]
description: Remove (or change) a filament/nozzle config in the database
gcode:
  {% set name = params.NAME|default("")|string %}
  {% set nozzle_diameter = params.NOZZLE|default(0.0)|float %}

  {% if not name %}
    { action_respond_info("FILAMENT_REMOVE: NAME is a required parameter, aborting") }
  {% else %}
    {% set filaments = printer.save_variables.variables.setdefault('filaments', {}) %}
    {% if name in filaments %}
      {% if nozzle_diameter %}
        {% set filament = filaments[name] %}
        {% for config in filament.configs %}
          {% if config.nozzle_diameter == nozzle_diameter %}
            {% set _ = filaments[name].configs.pop(loop.index0) %}
            { action_respond_info("Removed %1.02fmm nozzle config from filament %s" % (nozzle_diameter, name)) }
          {% elif loop.last %}
            { action_respond_info("No %1.02fmm nozzle config found for filament %s, nothing to remove" % (nozzle_diameter, name)) }
          {% endif %}
        {% endfor %}
      {% else %}
        {% set _ = filaments.pop(name) %}
        { action_respond_info("Removed filament %s and all nozzle configurations" % (name)) }
      {% endif %}
    {% else %}
      { action_respond_info("Filament %s not found, nothing to remove" % (name)) }
    {% endif %}
    SAVE_VARIABLE VARIABLE=filaments VALUE="{filaments}"
  {% endif %}
