# MOTOR INFORMATION 2.4
# AB LDO-42STH48-2004MAH(VRN) 0.9 deg 2 amp 400 steps
# Z  LDO-42STH48-2004AC(VRN)  1.8 deg 2 amp 200 steps
# Extruder LDO-36STH17-0354AH(G8T) 1.8 deg 1 amp 8 teeth

#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the following 3
## lines to define a new `variable_startprint_actions`. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "extruder_preheating", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
[gcode_macro _USER_VARIABLES] 
variable_startprint_actions: "bed_soak", "extruder_preheating", "chamber_soak", "clean", "tilt_calib", "z_offset", "bedmesh", "extruder_heating", "purge", "clean", "primeline" #Matched TAP order
gcode: # do not remove this line


#[stepper_z]
#position_min: -25 #Just for testing with probe_calibrate

[printer]
square_corner_velocity: 8.0

#-------------------------#
#   Probe Offsets         #
#-------------------------#

## Here is an example of some overrides for bed probes. These frequently have calibrated offsets for xyz,
## and many will need them during setup. If you need to set these, just uncomment the following lines.
[probe]
x_offset: 0
y_offset: 0
z_offset: 17.690 #17.685  # bigger == more squish
samples_tolerance: 0.0075 #0.01 #0.009 #0.0075
sample_retract_dist: 1
speed: 8 #5 #8
lift_speed: 24 # 10 #24 #12

[quad_gantry_level]
horizontal_move_z: 23.5 # add 5 from probe z offset

# [bed_mesh]
# horizontal_move_z: 21.5 #add 3 to probe z offset

[bed_mesh]
speed: 350
horizontal_move_z: 21.5 #add 3 to probe z offset
mesh_min: 50, 50
mesh_max: 300, 300
#probe_count: 5,5
probe_count: 7,7
fade_start: 0.6
fade_end: 2
algorithm: bicubic
zero_reference_position: 175, 175


[idle_timeout]
timeout: 7200
gcode:
    RESPOND MSG="Idle timeout reached"


#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#

## Here is an example of some overrides for the PIDs. I put them here as almost everyone will use them,
## so just uncomment the following lines and change the values according to your own machine

[extruder]
# New Config Value = Old Config Value * (Actual Extruded Amount/Target Extruded Amount)
rotation_distance: 22.6770732 #22.4748405
sensor_type: ATC Semitec 104NT-4-R025H42G

min_temp: 10
max_temp: 290
max_power: 1.0
min_extrude_temp: 172
pressure_advance: 0.036
pressure_advance_smooth_time: 0.040

control = pid
pid_Kp=26.658 
pid_Ki=2.913 
pid_Kd=60.980

[heater_bed]
control: pid
pid_Kp=57.232 
pid_Ki=2.385 
pid_Kd=343.392


[input_shaper]
smoother_freq_x: 57.0
shaper_type_x: smooth_mzv
smoother_freq_y: 38.2
shaper_type_y: smooth_mzv
#damping_ratio_x: 0.042
#damping_ratio_y: 0.056
enabled_extruders: extruder

#-------------------------#
#   Temp sensors          #
#-------------------------#

[temperature_sensor Chamber]
sensor_pin: CHAMBER_TEMPERATURE

[temperature_sensor Chamber2]
sensor_type: ATC Semitec 104GT-2
sensor_pin: E_TEMPERATURE

#-------------------------#
#   Fans                  #
#-------------------------#

[controller_fan controller_fan]
fan_speed: .6
idle_timeout: 60

[fan_generic BedFans]
pin: MCU_FAN4
#cycle_time: 0.05
kick_start_time: 0.5

#-------------------------#
#   Z MOTORS DIRECTION    #
#-------------------------#

## Here is an example of some overrides for the motor directions as it's a pretty common one. If you need
## to invert the Z1 or Z3 motor direction on your machine, just uncomment the following lines.
[stepper_z1]
dir_pin: !Z1_DIR

[stepper_z3]
dir_pin: !Z3_DIR


[output_pin caselight]
value: 50

#-------------------------#
#   Toolhead LEDs         #
#-------------------------#

# Neopixel leds used on the toolhead (stealthburner style)
[gcode_macro _USER_VARIABLES]
variable_status_leds_enabled: True
variable_status_leds_logo_led_name: "status_leds"
variable_status_leds_logo_idx: '2'
variable_status_leds_nozzle_led_name: "status_leds"
variable_status_leds_nozzle_idx: '1,3'
gcode:

# Also include directly the leds control macros from here
[include ./macros/hardware_functions/status_leds.cfg]

[neopixel status_leds]
pin: toolhead:STATUS_NEOPIXEL
#   The pin connected to the neopixel. This parameter must be provided.
chain_count: 3
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRBW
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 1.0
#   Sets the initial LED color of the Neopixel. Each value should be
#   between 0.0 and 1.0. The WHITE option is only available on RGBW
#   LEDs. The default for each color is 0.#




#-------------------------#
#   Additional Macros     #
#-------------------------#

[gcode_macro _BEDFANVARS]
variable_threshold: 100		# If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_fast: 0.6		# Fan speed once bed temp is reached  
variable_slow: 0.2		# Fan speed while bed is heating
gcode:

[gcode_macro BEDFANSSLOW]
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

[gcode_macro BEDFANSFAST]
gcode:
	# Vars
	{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={FAST}

[gcode_macro BEDFANSOFF]
gcode:
	SET_FAN_SPEED FAN=BedFans SPEED=0

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BEDFANSSLOW
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
		{% else %}
			BEDFANSOFF
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}
	
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BEDFANSSLOW																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		BEDFANSOFF																# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BEDFANSFAST																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BEDFANSOFF
	_TURN_OFF_HEATERS
	
################ Monitoring loop #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode bedfanloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			BEDFANSFAST															# If within 1 degree of target temp: Higher speed fans
		{% else %}
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5						# If temp not reached yet: loop again
		{% endif %}
	{% endif %}


[gcode_shell_command backup_cfg]
command: ~/printer_data/config/autocommit.sh
timeout: 30
verbose: True

[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
	RUN_SHELL_COMMAND CMD=backup_cfg
